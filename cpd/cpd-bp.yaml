apiVersion: cr.kanister.io/v1alpha1
kind: Blueprint
metadata:
  name: cpd-bp
  namespace: kasten-io
actions:
  backup:
    
    outputArtifacts:
      cpdOutput:
        keyValue:
          schedulingBackupName: '{{ .Phases.backupSchedulingAndTenant.Output.schedulingOnline }}'
          tenantBackupName: '{{ .Phases.backupSchedulingAndTenant.Output.tenantOnline }}'      
          oadpProject: '{{ .Phases.backupSchedulingAndTenant.Output.oadpProject }}'   
    
    # deferPhase happens whether the action is successful or not
    # we make sure that we clean any failed backup in order to succeed at the next one
    deferPhase:
      func: KubeTask  
      name: cleanupFailedBackup    
      objects:
          cpdVars:
            kind: Secret
            name: 'cpd-vars'
            namespace: '{{ .Object.metadata.namespace }}'
      args:
        image: michaelcourcy/kasten-cpd:k108.0.2-cpd5.1.x
        namespace: '{{ .Object.metadata.namespace }}'        
        command:
          - bash
          - -o
          - errexit
          - -o
          - pipefail
          - -x
          - -c
          - |
            echo "applying cpd-vars defined in the secret"
            {{- range $key, $value := .Phases.backupSchedulingAndTenant.Secrets.cpdVars.Data }}
            export {{ $key }}={{ $value | toString }}
            {{- end }} 

            echo "checking cpd-cli is working properly"
            export HOME=/tmp
            cd /tmp/
            cpd-cli oadp client config set namespace=$OADP_PROJECT

            echo "============================================================================"
            echo "clean failed backup that was generated by the kanister blueprint"
            echo "============================================================================"

            for failedTenantBackup in $(cpd-cli oadp tenant-backup list | grep -v Completed | grep -v NAME | grep tenant-online | awk '{print $1}'); do
              echo "Deleting failed tenant backup: $failedTenantBackup"
              cpd-cli oadp tenant-backup delete $failedTenantBackup
              # substring failedTenantBackup after 14 characthers tenant-online-20250711-071510 -> 20250711-071510
              failedTenantBackupDate=${failedTenantBackup:14} 
              schedulingBackup="scheduling-online-$failedTenantBackupDate"
              cpd-cli oadp backup delete $schedulingBackup
            done

            echo "unfence edb postgres clusters"
            for cluster in $(oc get clusters.postgresql.k8s.enterprisedb.io -n $PROJECT_CPD_INST_OPERANDS -o jsonpath='{.items[*].metadata.name}'); do
              echo "Checking cluster: $cluster"
              if oc get clusters.postgresql.k8s.enterprisedb.io -n $PROJECT_CPD_INST_OPERANDS $cluster -o yaml | grep fencedInstances;
              then
                echo "Unfencing cluster: $cluster"
                oc annotate clusters.postgresql.k8s.enterprisedb.io -n $PROJECT_CPD_INST_OPERANDS $cluster k8s.enterprisedb.io/fencedInstances-
              else
                echo "Cluster $cluster is not fenced, skipping"
              fi
            done

            echo "reset cpdr-lock-cm annotation"
            oc annotate cm -n $PROJECT_CPD_INST_OPERANDS cpdbr-lock-cm cpdbr.cpd.ibm.com/lock="" --overwrite 

    phases:
    - func: KubeTask
      name: backupSchedulingAndTenant
      objects:
          cpdVars:
            kind: Secret
            name: 'cpd-vars'
            namespace: '{{ .Object.metadata.namespace }}'
      args:
        image: michaelcourcy/kasten-cpd:k108.0.2-cpd5.1.x
        namespace: '{{ .Object.metadata.namespace }}'
        # the cpd-cli generate a lot of logs when doing a nackup 
        # we need a dedicated ephemeral storage to avoid overwhelming the node 
        podOverride:            
          containers:
          - name: container
            volumeMounts:
            - name: ephemeral-storage
              mountPath: /tmp
          volumes:
          - name: ephemeral-storage
            ephemeral:
              volumeClaimTemplate:
                spec:
                  accessModes: ["ReadWriteOnce"]
                # storageClassName: "managed-csi"
                  resources:
                    requests:                      
                      storage: 2Gi
        command:
          - bash
          - -o
          - errexit
          - -o
          - pipefail
          - -x
          - -c
          - |
            backupDate=$(date +%Y%m%d-%H%M%S)

            echo "applying cpd-vars defined in the secret"
            {{- range $key, $value := .Phases.backupSchedulingAndTenant.Secrets.cpdVars.Data }}
            export {{ $key }}={{ $value | toString }}
            {{- end }}           
            
            echo "checking cpd-cli is working properly"
            export HOME=/tmp
            cd /tmp/
            cpd-cli oadp client config set namespace=$OADP_PROJECT
            kando output oadpProject $OADP_PROJECT
            # test cpld-cli can list tenant-backup
            cpd-cli oadp tenant-backup list

            echo "Check whether the services that you are using support platform backup and restore"
            cpd-cli oadp service-registry check \
              --tenant-operator-namespace ${PROJECT_CPD_INST_OPERATORS} \
              --verbose \
              --log-level debug

            # TODO checking the status of each service require podman or docker (cpd-cli manage get-cr-status)

            echo "============================================================================"
            echo "Backing up the scheduling service"
            echo "============================================================================"
            cpd-cli oadp client config set cpd-namespace=${PROJECT_SCHEDULING_SERVICE}
            echo "precheck for scheduling service backup"
            cpd-cli oadp backup precheck \
              --backup-type singleton \
              --include-namespaces=${PROJECT_SCHEDULING_SERVICE} \
              --exclude-checks ValidVolumeSnapshotClass \
              --hook-kind=checkpoint \
              --log-level=debug \
              --verbose
            echo "scheduling service backup"            
            cpd-cli oadp backup create scheduling-online-${backupDate} \
              --backup-type singleton \
              --include-namespaces=${PROJECT_SCHEDULING_SERVICE} \
              --include-resources='operatorgroups,configmaps,catalogsources.operators.coreos.com,subscriptions.operators.coreos.com,customresourcedefinitions.apiextensions.k8s.io,scheduling.scheduler.spectrumcomputing.ibm.com' \
              --prehooks=false \
              --posthooks=false \
              --with-checkpoint \
              --log-level=debug \
              --verbose \
              --hook-kind=checkpoint \
              --selector 'icpdsupport/ignore-on-nd-backup notin (true)'
            echo "Validate the scheduling backup"
            cpd-cli oadp backup validate \
              --backup-type singleton \
              --include-namespaces=${PROJECT_SCHEDULING_SERVICE} \
              --backup-names scheduling-online-${backupDate} \
              --log-level trace \
              --verbose \
              --hook-kind checkpoint
            kando output schedulingOnline scheduling-online-${backupDate}
            
            echo "============================================================================"
            echo "Backing up tenant"
            echo "============================================================================"
            cpd-cli oadp tenant-backup create tenant-online-${backupDate} \
            --tenant-operator-namespace ${PROJECT_CPD_INST_OPERATORS} \
            --log-level=debug \
            --verbose
            kando output tenantOnline tenant-online-${backupDate}
  delete:
    inputArtifactNames:
    - cpdOutput
    phases:
    - func: KubeTask
      name: deleteSchedulingBackupAndTenantBackup      
      args:
        image: michaelcourcy/kasten-cpd:k108.0.2-cpd5.1.x        
        command:
          - bash
          - -o
          - errexit
          - -o
          - pipefail
          - -x
          - -c
          - |   
            OADP_PROJECT='{{ .ArtifactsIn.cpdOutput.KeyValue.oadpProject }}'
            # if empty default to openshift-adp
            if [ -z "$OADP_PROJECT" ]; then
              OADP_PROJECT=openshift-adp
            fi
            # check oadp namespace exists
            if ! kubectl get namespace $OADP_PROJECT; then
              echo "OADP project namespace $OADP_PROJECT does not exist, skipping delete"
              exit 0
            fi
            SCHEDULING_BACKUP_NAME='{{ .ArtifactsIn.cpdOutput.KeyValue.schedulingBackupName }}'
            TENANT_BACKUP_NAME='{{ .ArtifactsIn.cpdOutput.KeyValue.tenantBackupName }}'
            
            echo "checking cpd-cli is working properly"
            export HOME=/tmp
            cd /tmp/
            cpd-cli oadp client config set namespace=openshift-adp
            # test cpld-cli can list tenant-backup
            cpd-cli oadp tenant-backup list

            echo "============================================================================"
            echo "Deleting the scheduling service backup"
            echo "============================================================================"
            cpd-cli oadp backup delete $SCHEDULING_BACKUP_NAME

            echo "============================================================================"
            echo "Deleting the tenant backup"
            echo "============================================================================"
            cpd-cli oadp tenant-backup delete $TENANT_BACKUP_NAME
  restore:
    inputArtifactNames:
    - cpdOutput
    phases:
    - func: KubeTask
      name: restoreSchedulingBackupAndTenantBackup
      args:
        image: michaelcourcy/kasten-cpd:k108.0.2-cpd5.1.x        
        command:
          - bash
          - -o
          - errexit
          - -o
          - pipefail
          - -x
          - -c
          - |   
            
            echo "applying cpd-vars defined in the secret"
            {{- range $key, $value := .Phases.backupSchedulingAndTenant.Secrets.cpdVars.Data }}
            export {{ $key }}={{ $value | toString }}
            {{- end }} 

            echo "checking cpd-cli is working properly"
            export HOME=/tmp
            cd /tmp/
            cpd-cli oadp client config set namespace=$OADP_PROJECT

            SCHEDULING_BACKUP_NAME='{{ .ArtifactsIn.cpdOutput.KeyValue.schedulingBackupName }}'
            TENANT_BACKUP_NAME='{{ .ArtifactsIn.cpdOutput.KeyValue.tenantBackupName }}'

            # control that namespace $PROJECT_CPD_INST_OPERANDS, $PROJECT_CPD_INST_OPERATORS and $PROJECT_SCHEDULING_SERVICE are deleted
            # otherwise the restore will fail
            if kubectl get namespace $PROJECT_CPD_INST_OPERANDS; then
              echo "Namespace $PROJECT_CPD_INST_OPERANDS still exists, please delete it before restoring "
              exit 1
            fi
            if kubectl get namespace $PROJECT_CPD_INST_OPERATORS; then
              echo "Namespace $PROJECT_CPD_INST_OPERATORS still exists, please delete it before restoring "
              exit 1
            fi
            if kubectl get namespace $PROJECT_SCHEDULING_SERVICE; then
              echo "Namespace $PROJECT_SCHEDULING_SERVICE still exists, please delete it before restoring "
              exit 1
            fi

            echo "============================================================================"
            echo "Deleting the scheduling service backup"
            echo "============================================================================"
            cpd-cli oadp backup delete $SCHEDULING_BACKUP_NAME

            echo "============================================================================"
            echo "Deleting the tenant backup"
            echo "============================================================================"
            cpd-cli oadp tenant-backup delete $TENANT_BACKUP_NAME