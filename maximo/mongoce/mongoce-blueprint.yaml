apiVersion: cr.kanister.io/v1alpha1
kind: Blueprint
metadata:
  name: mongoce-blueprint
  namespace: kasten-io
  annotations:
    category: database
    description: Blueprint to backup and restore MongoDB used by Maximo Application Suite
actions:
  preBackupHook:    
    phases:
    - func: KubeTask
      name: backupDiscovery
      args:
        # https://github.com/michaelcourcy/kasten-tools
        image: michaelcourcy/kasten-tools:8.0.8
        command:
        - sh
        - -cx
        - |
          NAMESPACE={{ .Namespace.Name }}

          echo "discovering the key inside mas-mongo-ce-ca-certificate and mas-mongo-ce-server-certificate-key"
          ca_key=$(kubectl get secret mas-mongo-ce-ca-certificate -n $NAMESPACE -o jsonpath='{.data}' | jq -r 'keys[0]')
          server_key=$(kubectl get secret mas-mongo-ce-server-certificate-key -n $NAMESPACE -o jsonpath='{.data}' | jq -r 'keys[0]')
          kando output ca_key $ca_key
          kando output server_key $server_key

          echo "Discovering the image used in the statefulset"
          image=$(kubectl get statefulset mas-mongo-ce -n $NAMESPACE -o jsonpath='{.spec.template.spec.containers[?(@.name=="mongod")].image}')
          kando output image $image

          # we need to find a way to discover the MAS_INSTANCE_ID
          kando output mas_instance_id dev
    - func: KubeOps
      name: createMongoBackupPod
      args:
        operation: create
        namespace: "{{ .Namespace.Name }}"
        spec: |-
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: mongoce-backup-pvc            
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 20Gi
          ---
          apiVersion: v1
          kind: Pod
          metadata:
            name: mongoce-backup            
            labels:
              app: mongoce-backup
          spec:
            securityContext: 
              runAsNonRoot: true 
              seccompProfile: 
                type: "RuntimeDefault"
            containers:
            - name: mongoce-backup
              image: {{ .Phases.backupDiscovery.Output.image }}
              command: ["/bin/bash", "-c", "while true; do sleep 30; done"]
              securityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                  - ALL                
              env:
              - name: MONGO_ADMIN_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: mas-mongo-ce-admin-admin
                    key: password        
              volumeMounts:
              - name: tls-ca
                mountPath: /var/lib/tls/ca
                readOnly: true
              - name: tls-secret
                mountPath: /var/lib/tls/server
                readOnly: true
              - name: backup-storage
                mountPath: /data/mongo/dumps
            volumes:
            - name: tls-ca
              secret:
                secretName: mas-mongo-ce-ca-certificate
                items:
                  - key: {{ .Phases.backupDiscovery.Output.ca_key }}
                    path: ca.crt
            - name: tls-secret
              secret:
                secretName: mas-mongo-ce-server-certificate-key
                items:
                  - key: {{ .Phases.backupDiscovery.Output.server_key }}
                    path: mongo.pem
            - name: backup-storage
              persistentVolumeClaim:
                claimName: mongoce-backup-pvc            
            restartPolicy: Never
    - func: WaitV2
      name: waitForMongoceBackupPodReady
      args:
        timeout: 2m
        conditions:
          anyOf:
          - condition: '{{ $available := false }}{{ range $condition := $.status.conditions }}{{ if and (eq .type "Ready") (eq .status "True") }}{{ $available = true }}{{ end }}{{ end }}{{ $available }}'
            objectReference:
              apiVersion: "v1"
              group: ""
              name: mongoce-backup
              namespace: "{{ .Namespace.Name }}"
              resource: "pods"
    - func: KubeExec
      name: createDumps
      args:
        namespace: "{{ .Namespace.Name }}"
        pod: mongoce-backup
        container: mongoce-backup
        command:
          - bash
          - -o
          - errexit
          - -o
          - pipefail
          - -c
          - |
            # TODO this may be autodiscovered ? 
            MAS_INSTANCE_ID="{{ .Phases.backupDiscovery.Output.mas_instance_id }}"
            echo "Starting mongodump for mas_${MAS_INSTANCE_ID}_core"
            mongodump --uri="mongodb://admin:$MONGO_ADMIN_PASSWORD@mas-mongo-ce-0.mas-mongo-ce-svc.mongoce.svc.cluster.local:27017,mas-mongo-ce-1.mas-mongo-ce-svc.mongoce.svc.cluster.local:27017,mas-mongo-ce-2.mas-mongo-ce-svc.mongoce.svc.cluster.local:27017/?replicaSet=mas-mongo-ce&tls=true&authSource=admin" --sslCAFile=/var/lib/tls/ca/ca.crt --archive=/data/mongo/dumps/mas_${MAS_INSTANCE_ID}_core.archive -d mas_${MAS_INSTANCE_ID}_core
            echo "Completed mongodump for mas_${MAS_INSTANCE_ID}_core"
            echo "Starting mongodump for mas_${MAS_INSTANCE_ID}_catalog"
            mongodump --uri="mongodb://admin:$MONGO_ADMIN_PASSWORD@mas-mongo-ce-0.mas-mongo-ce-svc.mongoce.svc.cluster.local:27017,mas-mongo-ce-1.mas-mongo-ce-svc.mongoce.svc.cluster.local:27017,mas-mongo-ce-2.mas-mongo-ce-svc.mongoce.svc.cluster.local:27017/?replicaSet=mas-mongo-ce&tls=true&authSource=admin" --sslCAFile=/var/lib/tls/ca/ca.crt --archive=/data/mongo/dumps/mas_${MAS_INSTANCE_ID}_catalog.archive -d mas_${MAS_INSTANCE_ID}_catalog
            echo "Completed mongodump for mas_${MAS_INSTANCE_ID}_catalog"
  postBackupHook:
    phases:
    - func: KubeOps
      name: deleteMongoBackupPod
      args:
        operation: delete
        objectReference:
          apiVersion: v1
          group: ""
          resource: "pods"
          name: "mongoce-backup"
          namespace: "{{ .Namespace.Name }}"
    - func: KubeOps
      name: deleteMongoBackupPVC
      args:
        operation: delete
        objectReference:
          apiVersion: v1
          group: ""
          resource: "persistentvolumeclaims"
          name: "mongoce-backup-pvc"
          namespace: "{{ .Namespace.Name }}"

  postRestoreHook:    
    phases:
    - func: KubeTask
      name: restoreDiscovery
      args:
        # https://github.com/michaelcourcy/kasten-tools
        image: michaelcourcy/kasten-tools:8.0.8
        command:
        - sh
        - -cx
        - |
          NAMESPACE={{ .Namespace.Name }}

          echo "discovering the key inside mas-mongo-ce-ca-certificate and mas-mongo-ce-server-certificate-key"
          ca_key=$(kubectl get secret mas-mongo-ce-ca-certificate -n $NAMESPACE -o jsonpath='{.data}' | jq -r 'keys[0]')
          server_key=$(kubectl get secret mas-mongo-ce-server-certificate-key -n $NAMESPACE -o jsonpath='{.data}' | jq -r 'keys[0]')
          kando output ca_key $ca_key
          kando output server_key $server_key

          echo "Discovering the image used in the statefulset"
          image=$(kubectl get statefulset mas-mongo-ce -n $NAMESPACE -o jsonpath='{.spec.template.spec.containers[?(@.name=="mongod")].image}')
          kando output image $image

          # we need to find a way to discover the MAS_INSTANCE_ID
          sleep 30
          kando output mas_instance_id dev
    # we don't need to recreate pvc as it is restored by kasten, the pod need to be recreated with the key that may have changed on another cluster or another time
    - func: KubeOps
      name: createMongoRestorePod
      args:
        operation: create
        namespace: "{{ .Namespace.Name }}"
        spec: |-          
          apiVersion: v1
          kind: Pod
          metadata:
            name: mongoce-backup            
            labels:
              app: mongoce-backup
          spec:
            securityContext: 
              runAsNonRoot: true 
              seccompProfile: 
                type: "RuntimeDefault"
            containers:
            - name: mongoce-backup
              image: {{ .Phases.restoreDiscovery.Output.image }}
              command: ["/bin/bash", "-c", "while true; do sleep 30; done"]
              securityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                  - ALL                
              env:
              - name: MONGO_ADMIN_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: mas-mongo-ce-admin-admin
                    key: password        
              volumeMounts:
              - name: tls-ca
                mountPath: /var/lib/tls/ca
                readOnly: true
              - name: tls-secret
                mountPath: /var/lib/tls/server
                readOnly: true
              - name: backup-storage
                mountPath: /data/mongo/dumps
            volumes:
            - name: tls-ca
              secret:
                secretName: mas-mongo-ce-ca-certificate
                items:
                  - key: {{ .Phases.restoreDiscovery.Output.ca_key }}
                    path: ca.crt
            - name: tls-secret
              secret:
                secretName: mas-mongo-ce-server-certificate-key
                items:
                  - key: {{ .Phases.restoreDiscovery.Output.server_key }}
                    path: mongo.pem
            - name: backup-storage
              persistentVolumeClaim:
                claimName: mongoce-backup-pvc            
            restartPolicy: Never
    - func: WaitV2
      name: waitForMongoceRestorePodReady
      args:
        timeout: 2m
        conditions:
          anyOf:
          - condition: '{{ $available := false }}{{ range $condition := $.status.conditions }}{{ if and (eq .type "Ready") (eq .status "True") }}{{ $available = true }}{{ end }}{{ end }}{{ $available }}'
            objectReference:
              apiVersion: "v1"
              group: ""
              name: mongoce-backup
              namespace: "{{ .Namespace.Name }}"
              resource: "pods"
    - func: KubeExec
      name: restoreDumps
      args:
        namespace: "{{ .Namespace.Name }}"
        pod: mongoce-backup
        container: mongoce-backup
        command:
          - bash
          - -o
          - errexit
          - -o
          - pipefail
          - -c
          - |
            MAS_INSTANCE_ID="{{ .Phases.restoreDiscovery.Output.mas_instance_id }}"
            echo "Starting restore for mas_${MAS_INSTANCE_ID}_core"
            mongorestore --uri="mongodb://admin:$MONGO_ADMIN_PASSWORD@mas-mongo-ce-0.mas-mongo-ce-svc.mongoce.svc.cluster.local:27017,mas-mongo-ce-1.mas-mongo-ce-svc.mongoce.svc.cluster.local:27017,mas-mongo-ce-2.mas-mongo-ce-svc.mongoce.svc.cluster.local:27017/?replicaSet=mas-mongo-ce&tls=true&authSource=admin" --sslCAFile=/var/lib/tls/ca/ca.crt --archive=/data/mongo/dumps/mas_dev_core.archive --drop

            echo "Starting restore for mas_${MAS_INSTANCE_ID}_catalog"
            mongorestore --uri="mongodb://admin:$MONGO_ADMIN_PASSWORD@mas-mongo-ce-0.mas-mongo-ce-svc.mongoce.svc.cluster.local:27017,mas-mongo-ce-1.mas-mongo-ce-svc.mongoce.svc.cluster.local:27017,mas-mongo-ce-2.mas-mongo-ce-0.mas-mongo-ce-svc.mongoce.svc.cluster.local:27017/?replicaSet=mas-mongo-ce&tls=true&authSource=admin" --sslCAFile=/var/lib/tls/ca/ca.crt --archive=/data/mongo/dumps/mas_dev_catalog.archive --drop
    # clean up
    - func: KubeOps
      name: deleteMongoBackupPodAfterRestore
      args:
        operation: delete
        objectReference:
          apiVersion: v1
          group: ""
          resource: "pods"
          name: "mongoce-backup"
          namespace: "{{ .Namespace.Name }}"
    - func: KubeOps
      name: deleteMongoBackupPVCAfterRestore
      args:
        operation: delete
        objectReference:
          apiVersion: v1
          group: ""
          resource: "persistentvolumeclaims"
          name: "mongoce-backup-pvc"
          namespace: "{{ .Namespace.Name }}"